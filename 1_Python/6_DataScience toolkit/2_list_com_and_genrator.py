# [output expression +
# conditional on output for iterator variable in iterable +
# conditional on iterable]

nums = [12, 8, 21, 3, 16]
new_nums = []
for num in nums:
    new_nums.append(num + 1)
print(new_nums)

# Same using List comp
nums = [12, 8, 21, 3, 16]
new_nums = [num + 1 for num in nums]
print(new_nums)

# Nested Loops
pairs_1 = []
for num1 in range(0, 2):
    for num2 in range(6, 8):
        pairs_1.append(num1, num2)
print(pairs_1)

#List comp
pairs_2 = [(num1, num2) for num1 in range(0, 2) for num2 in range(6, 8)]


#Conditional Comprehension
[num ** 2 for num in range(10) if num % 2 == 0]
[num ** 2 if num % 2 == 0 else 0 for num in range(10)]

# Create a 5 x 5 matrix using a list of lists: matrix
matrix = [[col for col in range(5)] for row in range(5)]
# Print the matrix
for row in matrix:
    print(row)

'''==================================================== DICT============================================================='''
#Dict Comprehension
# Use curly braces {} instead of brackets []
pos_neg = {num: -num for num in range(9)}
print(pos_neg)

# Create a list of strings: fellowship
fellowship = ['frodo', 'samwise', 'merry', 'aragorn', 'legolas', 'boromir', 'gimli']
# Create dict comprehension: new_fellowship
new_fellowship = { member:len(member) for member in fellowship }
# Print the new dictionary
print(new_fellowship)


'''========================================================== GENRATOR =============================================='''
# Generator expressions
# Use ( ) instead of [ ]

[2 * num for num in range(10)] #List comp

(2 * num for num in range(10)) #genrator

result = (num for num in range(6))
print(list(result))

# Conditionals in generator expressions
even_nums = (num for num in range(10) if num % 2 == 0)
print(list(even_nums))


# Generator functions
def num_sequence(n):
    """Generate values from 0 to n."""
    i = 0
    while i < n:
        yield i
        i += 1

result = num_sequence(5)
for item in result:
    print(item)

# Create a list of strings
lannister = ['cersei', 'jaime', 'tywin', 'tyrion', 'joffrey']


# Define generator function get_lengths
def get_lengths(input_list):
    """Generator function that yields the
    length of the strings in input_list."""

    # Yield the length of a string
    for person in input_list:
        yield len(person)

# Print the values generated by get_lengths()
for value in get_lengths(lannister):
    print(value)

'''---------------------------------------------------------------- Timestamp Comp --------------------------------'''
# Extract the created_at column from df: tweet_time
tweet_time = df['created_at']

# Extract the clock time: tweet_clock_time
tweet_clock_time = [entry[11:19] for entry in tweet_time if entry[17:19] == '19']

# Print the extracted times
print(tweet_clock_time)